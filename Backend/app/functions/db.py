#db.py

import cx_Oracle
import os

# TNS_ADMIN should point to the wallet directory
TNS_ADMIN = os.getenv("TNS_ADMIN", "/home/opc/wallet")

# Database service name (from tnsnames.ora in the wallet directory)
DB_SERVICE = os.getenv("DB_SERVICE", "multiversedb_high")

# Initialize database connection
def initialize_db():
    try:
        # Establish a connection using the wallet
        connection = cx_Oracle.connect(
            dsn=DB_SERVICE,
            config_dir=TNS_ADMIN
        )
        cursor = connection.cursor()

        # Create users table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                username VARCHAR2(50) UNIQUE NOT NULL,
                password VARCHAR2(255) NOT NULL
            )
        ''')

        # Create libraries table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS libraries (
                api_key VARCHAR2(100) PRIMARY KEY,
                file_blob BLOB,
                user_id NUMBER NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            )
        ''')

        connection.commit()
        print("Database initialized successfully")
    except cx_Oracle.DatabaseError as e:
        print(f"Database error: {e}")
    finally:
        cursor.close()
        connection.close()

# Store API key and associated file path
def store_api_key(api_key, file_path):
    try:
        # Read the file to store as a BLOB
        with open(file_path, "rb") as file:
            file_blob = file.read()

        connection = cx_Oracle.connect(
            dsn=DB_SERVICE,
            config_dir=TNS_ADMIN
        )
        cursor = connection.cursor()
        cursor.execute(
            "INSERT INTO libraries (api_key, file_blob, user_id) VALUES (:1, :2, :3)",
            (api_key, file_blob, 1)  # Replace 1 with the actual user_id if needed
        )
        connection.commit()
    except cx_Oracle.DatabaseError as e:
        print(f"Database error: {e}")
    finally:
        cursor.close()
        connection.close()

# Retrieve file path (or blob) using the API key
def get_file_blob(api_key):
    try:
        connection = cx_Oracle.connect(
            dsn=DB_SERVICE,
            config_dir=TNS_ADMIN
        )
        cursor = connection.cursor()
        cursor.execute(
            "SELECT file_blob FROM libraries WHERE api_key = :1",
            (api_key,)
        )
        result = cursor.fetchone()
        return result[0] if result else None
    except cx_Oracle.DatabaseError as e:
        print(f"Database error: {e}")
    finally:
        cursor.close()
        connection.close()
